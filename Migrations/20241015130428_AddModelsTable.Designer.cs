// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OpDoc_Manager.Data;

#nullable disable

namespace OpDoc_Manager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241015130428_AddModelsTable")]
    partial class AddModelsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift", b =>
                {
                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Technical")
                        .HasColumnType("integer");

                    b.HasKey("UniqueId");

                    b.ToTable("Forklifts");
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+Engine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("EngineType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Engines");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+ForkliftLeaseInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("LeaseeCompany")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeaseeContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeaseeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeaseeOrgUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeaseePosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeaserCompany")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeaserContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeaserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeaserOrgUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LeaserPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LeaseInformation");
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+OperatorInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ForkliftAdminContact")
                        .HasColumnType("text");

                    b.Property<string>("ForkliftAdminPosition")
                        .HasColumnType("text");

                    b.Property<string>("ForkliftAdministrator")
                        .HasColumnType("text");

                    b.Property<bool>("IsDifferentOperator")
                        .HasColumnType("boolean");

                    b.Property<string>("OperationArea")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<string>("OperatorAddress")
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TechnicianName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TechnicianPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("TransferDate")
                        .HasColumnType("date");

                    b.Property<string>("TransferID")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperatorInformation");
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+TechnicalInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Manufacturer", "Model")
                        .IsUnique();

                    b.ToTable("ForkliftModels");
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+UserManualInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfTransfer")
                        .HasColumnType("date");

                    b.Property<bool>("IsOnlineManual")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("LeaseReturnDate")
                        .HasColumnType("date");

                    b.Property<string>("LeaseeSigneeName")
                        .HasColumnType("text");

                    b.Property<string>("LeaseeSigneePosition")
                        .HasColumnType("text");

                    b.Property<string>("LeaserSigneeName")
                        .HasColumnType("text");

                    b.Property<string>("LeaserSigneePosition")
                        .HasColumnType("text");

                    b.Property<string>("ManualWebsite")
                        .HasColumnType("text");

                    b.Property<string>("RecipientSigneeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecipientSigneePosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupplierSigneeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupplierSigneePosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupplierType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserManualInformation");
                });

            modelBuilder.Entity("OpDoc_Manager.Models.ElectricEngine", b =>
                {
                    b.HasBaseType("OpDoc_Manager.Models.Forklift+Engine");

                    b.Property<int>("BatteryCellCount")
                        .HasColumnType("integer");

                    b.Property<string>("BatteryManufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BatteryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BatteryVoltage")
                        .HasColumnType("integer");

                    b.Property<string>("EngineManufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EngineOutput")
                        .HasColumnType("integer");

                    b.Property<int>("EngineRPM")
                        .HasColumnType("integer");

                    b.Property<string>("FrequencyConverterManufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrequencyConverterPerformance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrequencyConverterType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InverterManufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InverterPerformance")
                        .HasColumnType("integer");

                    b.Property<string>("InverterType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NominalBatteryCapacity")
                        .HasColumnType("integer");

                    b.ToTable("ElectricEngines", (string)null);
                });

            modelBuilder.Entity("OpDoc_Manager.Models.InternalCombustionEngine", b =>
                {
                    b.HasBaseType("OpDoc_Manager.Models.Forklift+Engine");

                    b.Property<string>("CatalyticConverter")
                        .HasColumnType("text");

                    b.Property<int>("CylinderVolume")
                        .HasColumnType("integer");

                    b.Property<int>("EngineOutput")
                        .HasColumnType("integer");

                    b.Property<string>("EnviromentalClassification")
                        .HasColumnType("text");

                    b.Property<int>("FuelCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NatGasSafetyValveType")
                        .HasColumnType("text");

                    b.Property<string>("ProductionNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("ICEngine", (string)null);
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift", b =>
                {
                    b.OwnsOne("OpDoc_Manager.Models.Forklift+GeneralInformation", "General", b1 =>
                        {
                            b1.Property<Guid>("ForkliftUniqueId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ControlMethod")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ControlMethod");

                            b1.Property<string>("EnergySource")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("EnergySource");

                            b1.Property<DateOnly>("EntryIntoService")
                                .HasColumnType("date")
                                .HasColumnName("EntryIntoService");

                            b1.Property<string>("Manufacturer")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Manufacturer");

                            b1.Property<int>("ManufacturingYear")
                                .HasColumnType("integer")
                                .HasColumnName("ManufacturingYear");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Model");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.Property<string>("OperationType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("OperationType");

                            b1.Property<string>("ProductionNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ProductionNumber");

                            b1.HasKey("ForkliftUniqueId");

                            b1.ToTable("Forklifts");

                            b1.WithOwner()
                                .HasForeignKey("ForkliftUniqueId");
                        });

                    b.Navigation("General")
                        .IsRequired();
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+Engine", b =>
                {
                    b.HasOne("OpDoc_Manager.Models.Forklift+TechnicalInformation", null)
                        .WithOne("Engine")
                        .HasForeignKey("OpDoc_Manager.Models.Forklift+Engine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+ForkliftLeaseInformation", b =>
                {
                    b.HasOne("OpDoc_Manager.Models.Forklift+OperatorInformation", null)
                        .WithOne("LeaseInformation")
                        .HasForeignKey("OpDoc_Manager.Models.Forklift+ForkliftLeaseInformation", "Id");
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+OperatorInformation", b =>
                {
                    b.HasOne("OpDoc_Manager.Models.Forklift", null)
                        .WithOne("Operator")
                        .HasForeignKey("OpDoc_Manager.Models.Forklift+OperatorInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+TechnicalInformation", b =>
                {
                    b.OwnsOne("OpDoc_Manager.Models.Forklift+LiftMechanism", "Lift", b1 =>
                        {
                            b1.Property<Guid>("TechnicalInformationId")
                                .HasColumnType("uuid");

                            b1.Property<double>("BackwardTiltAngle")
                                .HasColumnType("double precision")
                                .HasColumnName("BackwardTiltAngle");

                            b1.Property<double>("ForwardTiltAngle")
                                .HasColumnType("double precision")
                                .HasColumnName("ForwardTiltAngle");

                            b1.Property<int>("FreeLiftHeight")
                                .HasColumnType("integer")
                                .HasColumnName("FreeLiftHeight");

                            b1.Property<int>("LoadCapacity")
                                .HasColumnType("integer")
                                .HasColumnName("LoadCapacity");

                            b1.Property<double>("LoadedTraversalSpeed")
                                .HasColumnType("double precision")
                                .HasColumnName("LoadedTraversalSpeed");

                            b1.Property<int>("MaximumHeightLoadCapacity")
                                .HasColumnType("integer")
                                .HasColumnName("MaximumHeightLoadCapacity");

                            b1.Property<int>("MaximumLiftHeight")
                                .HasColumnType("integer")
                                .HasColumnName("MaximumLiftHeight");

                            b1.Property<int>("NominalLiftHeight")
                                .HasColumnType("integer")
                                .HasColumnName("NominalLiftHeight");

                            b1.Property<double>("UnloadedTraversalSpeed")
                                .HasColumnType("double precision")
                                .HasColumnName("UnloadedTraversalSpeed");

                            b1.HasKey("TechnicalInformationId");

                            b1.ToTable("ForkliftModels");

                            b1.WithOwner()
                                .HasForeignKey("TechnicalInformationId");
                        });

                    b.OwnsOne("OpDoc_Manager.Models.Forklift+RoadInformation", "RoadInformation", b1 =>
                        {
                            b1.Property<Guid>("TechnicalInformationId")
                                .HasColumnType("uuid");

                            b1.Property<int>("AxleWidth")
                                .HasColumnType("integer")
                                .HasColumnName("AxleWidth");

                            b1.Property<int>("BackWheelCount")
                                .HasColumnType("integer")
                                .HasColumnName("BackWheelCount");

                            b1.Property<int>("BackWheelPressure")
                                .HasColumnType("integer")
                                .HasColumnName("BackWheelPressure");

                            b1.Property<int>("BackWheelSize")
                                .HasColumnType("integer")
                                .HasColumnName("BackWheelSize");

                            b1.Property<int>("BackWheelspan")
                                .HasColumnType("integer")
                                .HasColumnName("BackWheelspan");

                            b1.Property<int>("BatteryWeight")
                                .HasColumnType("integer")
                                .HasColumnName("BatteryWeight");

                            b1.Property<int>("BreakingForce")
                                .HasColumnType("integer")
                                .HasColumnName("BreakingForce");

                            b1.Property<int>("FrontWheelCount")
                                .HasColumnType("integer")
                                .HasColumnName("FrontWheelCount");

                            b1.Property<int>("FrontWheelPressure")
                                .HasColumnType("integer")
                                .HasColumnName("FrontWheelPressure");

                            b1.Property<int>("FrontWheelSize")
                                .HasColumnType("integer")
                                .HasColumnName("FrontWheelSize");

                            b1.Property<int>("FrontWheelspan")
                                .HasColumnType("integer")
                                .HasColumnName("FrontWheelspan");

                            b1.Property<int>("InnerTurningCircle")
                                .HasColumnType("integer")
                                .HasColumnName("InnerTurningCircle");

                            b1.Property<int>("Length")
                                .HasColumnType("integer")
                                .HasColumnName("Length");

                            b1.Property<int>("LoadedTopSpeed")
                                .HasColumnType("integer")
                                .HasColumnName("LoadedTopSpeed");

                            b1.Property<int>("MaximumOperationalHeight")
                                .HasColumnType("integer")
                                .HasColumnName("MaximumOperationalHeight");

                            b1.Property<int>("MaximumTransportHeight")
                                .HasColumnType("integer")
                                .HasColumnName("MaximumTransportHeight");

                            b1.Property<int>("OperationalWeight")
                                .HasColumnType("integer")
                                .HasColumnName("OperationalWeight");

                            b1.Property<int>("OuterTurningCircle")
                                .HasColumnType("integer")
                                .HasColumnName("OuterTurningCircle");

                            b1.Property<int>("ParkingBreakForce")
                                .HasColumnType("integer")
                                .HasColumnName("ParkingBreakForce");

                            b1.Property<int>("RideHeight")
                                .HasColumnType("integer")
                                .HasColumnName("RideHeight");

                            b1.Property<int>("TractiveForce")
                                .HasColumnType("integer")
                                .HasColumnName("TractiveForce");

                            b1.Property<int>("TransportHeight")
                                .HasColumnType("integer")
                                .HasColumnName("TransportHeight");

                            b1.Property<int>("UnloadedTopSpeed")
                                .HasColumnType("integer")
                                .HasColumnName("UnloadedTopSpeed");

                            b1.Property<int>("Width")
                                .HasColumnType("integer")
                                .HasColumnName("Width");

                            b1.HasKey("TechnicalInformationId");

                            b1.ToTable("ForkliftModels");

                            b1.WithOwner()
                                .HasForeignKey("TechnicalInformationId");
                        });

                    b.Navigation("Lift")
                        .IsRequired();

                    b.Navigation("RoadInformation")
                        .IsRequired();
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+UserManualInformation", b =>
                {
                    b.HasOne("OpDoc_Manager.Models.Forklift", null)
                        .WithOne("UserManual")
                        .HasForeignKey("OpDoc_Manager.Models.Forklift+UserManualInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpDoc_Manager.Models.ElectricEngine", b =>
                {
                    b.HasOne("OpDoc_Manager.Models.Forklift+Engine", null)
                        .WithOne()
                        .HasForeignKey("OpDoc_Manager.Models.ElectricEngine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpDoc_Manager.Models.InternalCombustionEngine", b =>
                {
                    b.HasOne("OpDoc_Manager.Models.Forklift+Engine", null)
                        .WithOne()
                        .HasForeignKey("OpDoc_Manager.Models.InternalCombustionEngine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift", b =>
                {
                    b.Navigation("Operator")
                        .IsRequired();

                    b.Navigation("UserManual")
                        .IsRequired();
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+OperatorInformation", b =>
                {
                    b.Navigation("LeaseInformation");
                });

            modelBuilder.Entity("OpDoc_Manager.Models.Forklift+TechnicalInformation", b =>
                {
                    b.Navigation("Engine")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
