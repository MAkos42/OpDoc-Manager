@{
    Html.ViewData.TemplateInfo.HtmlFieldPrefix = "Operator";

    var validationAttributes = new Dictionary<string, object> { { "class", "text-danger" } };

}
@model Forklift.OperatorInformation

<div class="tab-pane fade col-11" id="operator" role="tabpanel" aria-labelled-by="operator-tab">



    <div class="row col-md-6 mb-3">
        <div class="input-group">
            <span class="input-group-text unified-label-width">
                @Html.LabelFor(o => o.Owner, "Tulajdonos neve:")
            </span>
            @Html.TextBoxFor(o => o.Owner, new { @class = "form-control" })
            @Html.ValidationMessageFor(o => o.Owner, "", validationAttributes)
        </div>
    </div>


    <div class="row col-md-8 mb-3">
        <div class="input-group">
            <span class="input-group-text unified-label-width">
                @Html.LabelFor(o => o.OwnerAddress, "Tulajdonos címe:")
            </span>
            @Html.TextBoxFor(o => o.OwnerAddress, new { @class = "form-control" })
            @Html.ValidationMessageFor(o => o.OwnerAddress, "", validationAttributes)
        </div>
    </div>


    <div class="row mb-3"></div>


    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text unified-label-width">
                    @Html.LabelFor(o => o.Operator, "Üzelemtető neve:")

                </span>
                @Html.TextBoxFor(o => o.Operator, new { @class = "form-control different-operator-only" })
                @Html.ValidationMessageFor(o => o.Operator, "", new { @class = "text-danger different-operator-only" })
            </div>
        </div>

        <div class="col-md-4">
            <div class="form-check">
                @Html.CheckBoxFor(o => o.IsDifferentOperator, new { @class = "form-check-input" })
            </div>
        </div>
    </div>


    <div class="row col-md-8 mb-3">
        <div class="input-group">
            <span class="input-group-text unified-label-width">
                @Html.LabelFor(o => o.OperatorAddress, "Üzemeltető címe:")
            </span>
            @Html.TextBoxFor(o => o.OperatorAddress, new { @class = "form-control different-operator-only" })
            @Html.ValidationMessageFor(o => o.OperatorAddress, "", new { @class = "text-danger different-operator-only" })
        </div>
    </div>

    <div class="card mb-3 col-md-8">
        <div class="card-header">
            Üzemeltetői feladatok átruházásáról szóló szerződés adatai
        </div>
        <div class="card-body row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text unified-label-width">
                        @Html.LabelFor(o => o.TransferDate, "Szerződés dátuma:")
                    </span>
                    @Html.TextBoxFor(o => o.TransferDate, "{0:yyyy-MM-dd}", new { @class = "form-control different-operator-only", type = "date" })
                    @Html.ValidationMessageFor(o => o.TransferDate, "", new { @class = "text-danger different-operator-only" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text unified-label-width">
                        @Html.LabelFor(o => o.TransferID, "Szerződés száma:")
                    </span>
                    @Html.TextBoxFor(o => o.TransferID, new { @class = "form-control different-operator-only" })
                    @Html.ValidationMessageFor(o => o.TransferID, "", new { @class = "text-danger different-operator-only" })
                </div>
            </div>
        </div>
    </div>


    <div class="card fade" id="LeaseOnly">
        <div class="card-header">
            <h4>Bérlési információ</h4>
        </div>

        <div class="card-body row">

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        Bérbeadó
                    </div>

                    <div class="card-body">

                        <div class="input-group row mb-3">
                            <span class="input-group-text col-md-4">
                                @Html.LabelFor(o => o.LeaseInformation.LeaserCompany, "Szervezet neve:")
                            </span>
                            @Html.TextBoxFor(o => o.LeaseInformation.LeaserCompany, new { @class = "form-control" })
                            @Html.ValidationMessageFor(o => o.LeaseInformation.LeaserCompany, "", validationAttributes)
                        </div>

                        <div class="row mb-3">
                            A bérleti szerződést aláíró személy:
                        </div>

                        <div class="input-group row mb-3">
                            <span class="input-group-text col-md-4">
                                @Html.LabelFor(o => o.LeaseInformation.LeaserName, "Neve:")
                            </span>
                            @Html.TextBoxFor(o => o.LeaseInformation.LeaserName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(o => o.LeaseInformation.LeaserName, "", validationAttributes)
                        </div>

                        <div class="input-group row mb-3">
                            <span class="input-group-text col-md-4">
                                @Html.LabelFor(o => o.LeaseInformation.LeaserOrgUnit, "Szervezeti egység:")
                            </span>
                            @Html.TextBoxFor(o => o.LeaseInformation.LeaserOrgUnit, new { @class = "form-control" })
                            @Html.ValidationMessageFor(o => o.LeaseInformation.LeaserOrgUnit, "", validationAttributes)
                        </div>

                        <div class="input-group row mb-3">
                            <span class="input-group-text col-md-4">
                                @Html.LabelFor(o => o.LeaseInformation.LeaserPosition, "Beosztás:")
                            </span>
                            @Html.TextBoxFor(o => o.LeaseInformation.LeaserPosition, new { @class = "form-control" })
                            @Html.ValidationMessageFor(o => o.LeaseInformation.LeaserPosition, "", validationAttributes)
                        </div>

                        <div class="input-group row mb-3">
                            <span class="input-group-text col-md-4">
                                @Html.LabelFor(o => o.LeaseInformation.LeaserContact, "Elérhetőség:")
                            </span>
                            @Html.TextBoxFor(o => o.LeaseInformation.LeaserContact, new { @class = "form-control" })
                            @Html.ValidationMessageFor(o => o.LeaseInformation.LeaserContact, "", validationAttributes)
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        Bérbevevő
                    </div>

                    <div class="card-body">

                        <div class="input-group row mb-3">
                            <span class="input-group-text col-md-4">
                                @Html.LabelFor(o => o.LeaseInformation.LeaseeCompany, "Szervezet neve:")
                            </span>
                            @Html.TextBoxFor(o => o.LeaseInformation.LeaseeCompany, new { @class = "form-control" })
                            @Html.ValidationMessageFor(o => o.LeaseInformation.LeaseeCompany, "", validationAttributes)
                        </div>

                        <div class="row mb-3">
                            A bérleti szerződést aláíró személy:
                        </div>

                        <div class="input-group row mb-3">
                            <span class="input-group-text col-md-4">
                                @Html.LabelFor(o => o.LeaseInformation.LeaseeName, "Neve:")
                            </span>
                            @Html.TextBoxFor(o => o.LeaseInformation.LeaseeName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(o => o.LeaseInformation.LeaseeName, "", validationAttributes)
                        </div>

                        <div class="input-group row mb-3">
                            <span class="input-group-text col-md-4">
                                @Html.LabelFor(o => o.LeaseInformation.LeaseeOrgUnit, "Szervezeti egység:")
                            </span>
                            @Html.TextBoxFor(o => o.LeaseInformation.LeaseeOrgUnit, new { @class = "form-control" })
                            @Html.ValidationMessageFor(o => o.LeaseInformation.LeaseeOrgUnit, "", validationAttributes)
                        </div>

                        <div class="input-group row mb-3">
                            <span class="input-group-text col-md-4">
                                @Html.LabelFor(o => o.LeaseInformation.LeaseePosition, "Beosztás:")
                            </span>
                            @Html.TextBoxFor(o => o.LeaseInformation.LeaseePosition, new { @class = "form-control" })
                            @Html.ValidationMessageFor(o => o.LeaseInformation.LeaseePosition, "", validationAttributes)
                        </div>

                        <div class="input-group row mb-3">
                            <span class="input-group-text col-md-4">
                                @Html.LabelFor(o => o.LeaseInformation.LeaseeContact, "Elérhetőség:")
                            </span>
                            @Html.TextBoxFor(o => o.LeaseInformation.LeaseeContact, new { @class = "form-control" })
                            @Html.ValidationMessageFor(o => o.LeaseInformation.LeaseeContact, "", validationAttributes)
                        </div>
                    </div>
                </div>
            </div>


        </div>



    </div>



</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const checkbox = document.getElementById('Operator_IsDifferentOperator');
        const leaseDiv = document.getElementById('LeaseOnly');
        const operatorInput = document.getElementById('Operator_Operator');
        const operatorAddressInput = document.getElementById('Operator_OperatorAddress');
        const ownerInput = document.getElementById('Operator_Owner');
        const ownerAddressInput = document.getElementById('Operator_OwnerAddress');
        const inputs = document.querySelectorAll('.different-operator-only');

        checkbox.addEventListener('change', function () {

            if (checkbox.checked) {
                leaseDiv.classList.add('show');
                operatorInput.value = '';
                operatorAddressInput.value = '';
            }
            else {
                leaseDiv.classList.remove('show');
                operatorInput.value = ownerInput.value;
                operatorAddressInput.value = ownerAddressInput.value;
            }

            inputs.forEach(input => {
                input.disabled = !checkbox.checked;
            });

        });

        if (checkbox.checked) {
            leaseDiv.classList.add('show');
            operatorInput.value = '';
            operatorAddressInput.value = '';
        }
        else {
            leaseDiv.classList.remove('show');
            operatorInput.value = ownerInput.value;
            operatorAddressInput.value = ownerAddressInput.value;
        }

        inputs.forEach(input => {
            input.disabled = !checkbox.checked;
        });
    });
</script>